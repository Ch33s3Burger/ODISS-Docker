version: '3'

volumes:
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}

services:
# Trino
  trinocoordinator:
    image: "lewuathe/trino-coordinator:354"
    depends_on:
      - broker
    ports:
      - "8180:8080"
    container_name: "trino_coordinator"
    command: http://trinocoordinator:8080 coordinator
    volumes:
      - ./trino/etc:/usr/local/trino/etc            
#    restart: on-failure
  worker0:
    image: "lewuathe/trino-worker:354"
    depends_on:
      - trinocoordinator
    container_name: "trino_worker0"
    ports:
      - "8181:8081"
    command: http://trinocoordinator:8080 worker0
#    restart: on-failure
  worker1:
    image: "lewuathe/trino-worker:354"
    depends_on:
      - trinocoordinator
    container_name: "trino_worker1"
    ports:
      - "8182:8081"
    command: http://trinocoordinator:8080 worker1
#    restart: on-failure
# Metabase
  metabase:
    image: "metabase/metabase:latest"
    ports:
      - "8443:8443"
    container_name: "metabase"
    volumes:
      - ./cert.jks:/cert.jks
#      - ./trino_cert.jks:/trino_cert.jks
      - ./metabase:/tmp
    environment:
      - MB_DB_FILE=/tmp/metabase.db
      - MB_JETTY_SSL=true
      - MB_JETTY_SSL_PORT=8443
      - MB_JETTY_SSL_KEYSTORE=/cert.jks
      - MB_JETTY_SSL_KEYSTORE_PASSWORD=geheim
# Druid
  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid

  # Need 3.5 or later for container nodes
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=1
      - ALLOW_ANONYMOUS_LOGIN=yes

  coordinator:
    image: apache/druid:0.22.1
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - environment

  broker:
    image: apache/druid:0.22.1
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - environment

  historical:
    image: apache/druid:0.22.1
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - environment

  middlemanager:
    image: apache/druid:0.22.1
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - environment

  router:
    image: apache/druid:0.22.1
    container_name: router
    volumes:
      - router_var:/opt/druid/var
      - ./data:/opt/shared/data
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - environment

#Kafka
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9093:9093'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes

      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
