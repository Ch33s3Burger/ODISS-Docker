#!/usr/bin/env bash

set -e

KEYSTORE_FILENAME="${ODISS_KAFKA_KEYSTORE_FILE_NAME}"
VALIDITY_IN_DAYS=3650
DEFAULT_TRUSTSTORE_FILENAME="${ODISS_KAFKA_TRUSTSTORE_FILE_NAME}"
TRUSTSTORE_WORKING_DIRECTORY="./config/kafka/certs"
KEYSTORE_WORKING_DIRECTORY="./config/kafka/certs"
CA_CERT_FILE="ca-cert"
KEYSTORE_SIGN_REQUEST="cert-file"
KEYSTORE_SIGNED_CERT="cert-signed"

function file_exists_and_exit() {
  echo "'$1' already exists. Do you still want to create the file there? They will all be deleted first. [yn]"
  read still_create
  if [ "$still_create" == "n" ]; then 
    exit 1
  fi
}

if [ -e "$KEYSTORE_WORKING_DIRECTORY" ]; then
  if [ "$1" != "-f" ]; then
    file_exists_and_exit $KEYSTORE_WORKING_DIRECTORY;
  fi
  rm -rf $KEYSTORE_WORKING_DIRECTORY
fi
mkdir $TRUSTSTORE_WORKING_DIRECTORY

echo
echo "Welcome to the Kafka SSL keystore and truststore generator script."

echo
echo "First, do you need to generate a trust store and associated private key,"
echo "or do you already have a trust store file and private key?"

if [ "$1" != "-f" ]; then
  echo
  echo -n "Do you need to generate a trust store and associated private key? [yn] "
  read generate_trust_store
else
  generate_trust_store="y"
fi

trust_store_file=""
trust_store_private_key_file=""


if [ "$generate_trust_store" == "y" ]; then
  echo
  echo "OK, we'll generate a trust store and associated private key."
  echo
  echo "First, the private key."

  openssl req -new -x509 -keyout $TRUSTSTORE_WORKING_DIRECTORY/ca-key \
    -out $TRUSTSTORE_WORKING_DIRECTORY/$CA_CERT_FILE -days $VALIDITY_IN_DAYS \
    -subj '/CN=${ODISS_SERVER_NAME}/O=My Company Name LTD./C=DE' \
    -passout pass:${ODISS_KAFKA_KEY_PASSWORD}

  trust_store_private_key_file="$TRUSTSTORE_WORKING_DIRECTORY/ca-key"

  echo
  echo "Two files were created:"
  echo " - $TRUSTSTORE_WORKING_DIRECTORY/ca-key -- the private key used later to"
  echo "   sign certificates"
  echo " - $TRUSTSTORE_WORKING_DIRECTORY/$CA_CERT_FILE -- the certificate that will be"
  echo "   stored in the trust store in a moment and serve as the certificate"
  echo "   authority (CA). Once this certificate has been stored in the trust"
  echo "   store, it will be deleted. It can be retrieved from the trust store via:"
  echo "   $ keytool -keystore <trust-store-file> -export -alias CARoot -rfc"

  echo
  echo "Now the trust store will be generated from the certificate."

  keytool -keystore $TRUSTSTORE_WORKING_DIRECTORY/$DEFAULT_TRUSTSTORE_FILENAME \
    -alias CARoot -import -file $TRUSTSTORE_WORKING_DIRECTORY/$CA_CERT_FILE \
    -storepass ${ODISS_KAFKA_TRUSTSTORE_PASSWORD} -noprompt

  trust_store_file="$TRUSTSTORE_WORKING_DIRECTORY/$DEFAULT_TRUSTSTORE_FILENAME"

  echo
  echo "$TRUSTSTORE_WORKING_DIRECTORY/$DEFAULT_TRUSTSTORE_FILENAME was created."

  # don't need the cert because it's in the trust store.
  rm $TRUSTSTORE_WORKING_DIRECTORY/$CA_CERT_FILE
else
  echo
  echo -n "Enter the path of the trust store file. "
  read -e trust_store_file

  if ! [ -f $trust_store_file ]; then
    echo "$trust_store_file isn't a file. Exiting."
    exit 1
  fi

  echo -n "Enter the path of the trust store's private key. "
  read -e trust_store_private_key_file

  if ! [ -f $trust_store_private_key_file ]; then
    echo "$trust_store_private_key_file isn't a file. Exiting."
    exit 1
  fi
fi

echo
echo "Continuing with:"
echo " - trust store file:        $trust_store_file"
echo " - trust store private key: $trust_store_private_key_file"

echo
echo "Now, a keystore will be generated. Each broker and logical client needs its own"
echo "keystore. This script will create only one keystore."

keytool -keystore $KEYSTORE_WORKING_DIRECTORY/$KEYSTORE_FILENAME \
  -alias localhost -validity $VALIDITY_IN_DAYS -genkey -keyalg RSA \
  -storepass ${ODISS_KAFKA_KEYSTORE_PASSWORD} -noprompt < ./scripts_template/example_keystore_data.txt

echo
echo "'$KEYSTORE_WORKING_DIRECTORY/$KEYSTORE_FILENAME' now contains a key pair and a"
echo "self-signed certificate. Again, this keystore can only be used for one broker or"
echo "one logical client. Other brokers or clients need to generate their own keystores."

echo
echo "Fetching the certificate from the trust store and storing in $CA_CERT_FILE."

keytool -keystore $trust_store_file -export -alias CARoot -rfc -file $CA_CERT_FILE \
  -storepass ${ODISS_KAFKA_TRUSTSTORE_PASSWORD}

echo
echo "Now a certificate signing request will be made to the keystore."

keytool -keystore $KEYSTORE_WORKING_DIRECTORY/$KEYSTORE_FILENAME -alias localhost \
  -certreq -file $KEYSTORE_SIGN_REQUEST -storepass ${ODISS_KAFKA_KEYSTORE_PASSWORD}

echo
echo "Now the trust store's private key (CA) will sign the keystore's certificate."

openssl x509 -req -CA $CA_CERT_FILE -CAkey $trust_store_private_key_file \
  -in $KEYSTORE_SIGN_REQUEST -out $KEYSTORE_SIGNED_CERT \
  -days $VALIDITY_IN_DAYS -CAcreateserial -passin pass:${ODISS_KAFKA_KEY_PASSWORD}
# creates $KEYSTORE_SIGN_REQUEST_SRL which is never used or needed.

echo
echo "Now the CA will be imported into the keystore."

keytool -keystore $KEYSTORE_WORKING_DIRECTORY/$KEYSTORE_FILENAME -alias CARoot \
  -import -file $CA_CERT_FILE \
  -storepass ${ODISS_KAFKA_KEYSTORE_PASSWORD} -noprompt
rm $CA_CERT_FILE # delete the trust store cert because it's stored in the trust store.

echo
echo "Now the keystore's signed certificate will be imported back into the keystore."

keytool -keystore $KEYSTORE_WORKING_DIRECTORY/$KEYSTORE_FILENAME -alias localhost -import \
  -file $KEYSTORE_SIGNED_CERT -storepass ${ODISS_KAFKA_KEYSTORE_PASSWORD}


rm $KEYSTORE_SIGN_REQUEST
rm $KEYSTORE_SIGNED_CERT

echo
echo "All done!"


